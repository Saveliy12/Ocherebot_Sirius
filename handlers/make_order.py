from aiogram import Bot, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.filters import Command
from keyboards.order import generate_order_kb, add_checkmark_to_dish
from states.order import NewOrder
from database.post_order import send_order
from utils.validate_order import validate_order
from filters.name_filter import NameFilter
from filters.time_filter import TimeFilter

order_router = Router()

@order_router.message(Command("order"))
async def order_handler(msg: Message, state: FSMContext):
    await msg.reply("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞:", reply_markup=generate_order_kb())
    await state.set_state(NewOrder.dishes)

@order_router.callback_query(NewOrder.dishes)
async def process_callback(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    if callback_query.data.startswith("select_dish"):

        dish_name = callback_query.data.split(":")[2]

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª—é–¥–∞
        await bot.answer_callback_query(callback_query.id, f"–í—ã–±—Ä–∞–Ω–æ –±–ª—é–¥–æ - {dish_name}")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–ª—é–¥—É
        inline_keyboard = callback_query.message.reply_markup
        await add_checkmark_to_dish(callback_query.data, inline_keyboard, state)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–æ—á–∫—É
        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                            message_id=callback_query.message.message_id,
                                            reply_markup=inline_keyboard)
        
        
    elif callback_query.data == "make_order":

        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                            message_id=callback_query.message.message_id,
                                            reply_markup=None)

        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.edit_message_text(chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")

        # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –±–ª—é–¥
        total_price = sum([dish['price'] for dish in data.get('dishes', [])])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        data['total_price'] = total_price
        await state.update_data(data)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"
        await bot.answer_callback_query(callback_query.id, f"–í—ã —Å–¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑!\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price}")

        # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è name –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.set_state(NewOrder.name)
    else:
        await bot.answer_callback_query(callback_query.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")


@order_router.message(NewOrder.name, NameFilter())
async def process_name(message: Message, state: FSMContext):

    await state.update_data(name=message.text)

    # –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
    await message.answer(text="–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –≤–æ —Å–∫–æ–ª—å–∫–æ –≤—ã –∑–∞–±–µ—Ä–µ—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è time_to –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
    await state.set_state(NewOrder.time_to)

@order_router.message(NewOrder.name)
async def process_name(message: Message):
    await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª!. –¢–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")

@order_router.message(NewOrder.time_to, TimeFilter())
async def process_time(message: Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(time_to=message.text)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    dishes_list = data.get('dishes', [])
    name = data.get('name')
    total_price = data.get('total_price')
    time_to = data.get('time_to')

    print(f"dishes_list - {dishes_list}")

    send_order(name, time_to, total_price, dishes_list)

    # –∑–∞–ø—Ä–æ—Å –≤ –º–µ–Ω—é - –≥–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    # –∑–∞–ø—Ä–æ—Å –≤ –æ—Ä–¥–µ—Ä - –ø–æ—Å—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ä–¥–µ—Ä –∑–∞–∫–∞–∑–∞
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
    await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\nüë§ –ò–º—è: <b>{name}</b>\nüç≤ –ë–ª—é–¥–∞:\n<b>{validate_order(dishes_list)}</b>\nüí≥ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{total_price} ‚ÇΩ</b>\nüïô –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: <b>{time_to}</b>\n\n–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞–∑–æ–≤–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

@order_router.message(NewOrder.time_to)
async def process_name(message: Message):
    await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É hh:mm")
